#!/opt/local/bin/perl


use strict;
use warnings;
use Data::Dumper;
#use Bio::SeqIO;
#use Bio::BioLib::generalIO;
use Getopt::Long;

my $USAGE=<<USAGE;

  * $0 *

   ( for each file )

   construct a script using expressions.
   by default it just prints the script on the
   screen.

  OPTIONS:

    -c,-command     the command line that you want
                    see examples below. 2 special characters
                    can be used @ and # 
                    @ - for files matching the supplied pattern
                    # - for simple numbers (1,2,3...)

    -e,-expression  expression that must be expanded

    -outfile        you can save the result to a outfile by
                    giving the name of the output file, and run
                    this file as a unix script

    -n,-number      in case you dont use an expression, you can use
                    this option to create "n" number of commands


    -run            will run the commands one by one
                    without making any script. it will ask
                    you of first if the command line created
                    looks fine to you or not


   -repeat          In case you have only one command and you want
                    to run it multiple times, e.g. useful to run
                    the same song in mpg123 player :)

                     use it like this
                     fef -c "mpg123 @" -e="song.mp3" -repeat 10

                     in case there are many files, then all will be
                     repeated

                     In case you want a delay of a few seconds between
                     the times the song is played you can add a sleep command
                     like this.. sleeping for 10 seconds after one song is over...
 
		     fef -c "mpg123 @ ; sleep 10 " -e="song.mp3" -repeat 10
                     


   e.g. lets say you want to run formatdb on a
   set of fna files (1.fna,2.fna,3.fna)

      fef -c "formatdb -i @ -p F"  -e "*.fna" 
     
   will construct this script on the screen

     formatdb -i 1.fna -p F
     formatdb -i 2.fna -p F
     formatdb -i 3.fna -p F

    the funny looking @ is where the *.fna will be expanded

 
   Using 2 subsitutions
   --------------------

    fef -c "blastall -i @ -d nr -p blastp -e 0.001 -o @.blast" -e="*.fna"

   will produce this

	blastall -i 1.fna -d nr -p blastp -e 0.001 -o 1.fna.blast
	blastall -i 2.fna -d nr -p blastp -e 0.001 -o 2.fna.blast
	blastall -i 3.fna -d nr -p blastp -e 0.001 -o 3.fna.blast


    You can use as many \@ symbols that you want in the command
    line. All will be replaced by each matching element in the expression.


   Using numbers (#)
   ---------------

    using a "#" symbol in the expression will replace it with a number, like this..

   fef -c "blastall -i @ d nr -p blastp -e 0.001 -o #.blast " -e="*.fna"

	blastall -i x.fna -d nr -p blastp -e 0.001 -o 1.blast
	blastall -i y.fna -d nr -p blastp -e 0.001 -o 2.blast
	blastall -i z.fna -d nr -p blastp -e 0.001 -o 3.blast


   Using fef without an expression
   ----------------------------------


     fef -c "mkdir temp#" -n 5
        mkdir temp1
        mkdir temp2
        mkdir temp3
        mkdir temp4
        mkdir temp5


     remember if you have given an expression with -e, then -n does not take effect
     and is ignored.



   $0 -h
   $0 --help
   $0 -help


USAGE


my ($infile,$outfile,$help,$command,$expression,$run,$number,$repeat);
$run=0;
$number=0;
$repeat=0;
GetOptions ("c|command=s"      => \$command, 
            "e|expression=s"   => \$expression,
            "n|number=i"       => \$number,
            "repeat=i"         => \$repeat,
            "r|run"            => \$run,
            "o|outfile=s"      => \$outfile,
            "h|help"           => \$help
	   );  


if (!$command) { die $USAGE,"No command specified (-c)\n" };
if (!$expression) { 
	if (!$number) {
		die $USAGE,"No expression specified (-e), neither a number given (-n)\n" 
	}
};

if ($expression) {$number=""}; # only one of -e and -n can happen, -e takes precedence

if ($help)  { die $USAGE };

my @script_commands;

########################################################################################

if ($expression) {

  my @list = < $expression >;
  #  print Dumper @list;
  my $cmdcount;
  foreach my $element (@list) {

	$cmdcount++;
	my $newcommand = $command;
	#print "$newcommand\n";
	$newcommand =~ s/\@/$element/g;
	if ($newcommand=~/#/) {
		$newcommand =~ s/#/$cmdcount/g;
	}

	print "$newcommand\n";
	push (@script_commands,$newcommand);

  }


}

########################################################################################


if ($number) {

  my $cmdcount;

  for (my $i=0;$i<$number;$i++) {
	$cmdcount++;
	my $newcommand = $command;
	if ($newcommand=~/#/) {
		$newcommand =~ s/#/$cmdcount/g;
	}
	print "$newcommand\n";
	push (@script_commands,$newcommand);


  }


}

if ($repeat) {

	# if there are many command then all of them will be repeated
	my @new_script_commands = @script_commands;

	for (my $c=0;$c<$repeat;$c++) {
		for (my $x=0;$x<@script_commands;$x++) {
			print "$script_commands[$x]\n";
			push (@new_script_commands,$script_commands[$x]);
		}

	}

	@script_commands = ();
	@script_commands = @new_script_commands;

}


########################################################################################

if ($outfile) {

	open (OUT, ">$outfile") or die "Cannot open $outfile $! \n";

	my $date = `date`;
	chomp $date;
	my $cmdcount = scalar @script_commands;
	print OUT  "# SCRIPT GENERATED USING fef on $date\n";
	if ($repeat) {
		print OUT  "# command = $command , expression = $expression ,  repeat = $repeat\n";
	} else {
		print OUT  "# command = $command , expression = $expression\n";
	}
	print OUT  "# A total of $cmdcount commands are present in this file\n";


	foreach my $c (@script_commands) {
		print OUT "$c\n";

	}

	close OUT;

}

########################################################################################

if ($run) {
	print "Going to run the commands now, press ENTER to start of press Control-c to quit"; 
	<STDIN>;
	my $c=0;
	my $total=scalar @script_commands;
	foreach my $cmd (@script_commands){
		$c++;
		print "Running[$c of $total]:$cmd\n";
		system ("$cmd\n");

	}
	exit;
}



__END__




